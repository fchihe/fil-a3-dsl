/**
 * generated by Xtext 2.10.0
 */
package org.emn.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.File;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.emn.uiTest.Click;
import org.emn.uiTest.Command;
import org.emn.uiTest.Fill;
import org.emn.uiTest.Function;
import org.emn.uiTest.FunctionCall;
import org.emn.uiTest.FunctionName;
import org.emn.uiTest.GoOn;
import org.emn.uiTest.Open;
import org.emn.uiTest.Select;
import org.emn.uiTest.Selector;
import org.emn.uiTest.Store;
import org.emn.uiTest.UiTest;
import org.emn.uiTest.VariableDefinition;
import org.emn.uiTest.Verify;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class UiTestGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    Iterable<UiTest> _filter = Iterables.<UiTest>filter(_contents, UiTest.class);
    UiTest _head = IterableExtensions.<UiTest>head(_filter);
    CharSequence _generateUiTest = this.generateUiTest(_head);
    fsa.generateFile((("browserAutomation" + File.separator) + "Main.java"), _generateUiTest);
  }
  
  public CharSequence generateUiTest(final UiTest uiTest) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package browserAutomation;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.firefox.FirefoxDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.support.ui.Select;");
    _builder.newLine();
    _builder.append("class Main {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static WebDriver driver;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    {
      EList<Command> _commands = uiTest.getCommands();
      for(final Command c : _commands) {
        _builder.append("\t\t\t");
        CharSequence _generateCommand = this.generateCommand(c);
        _builder.append(_generateCommand, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<Function> _functions = uiTest.getFunctions();
      for(final Function f : _functions) {
        _builder.append("\t\t");
        _builder.append("public static void ");
        FunctionName _name = f.getName();
        String _name_1 = _name.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("(");
        {
          EList<VariableDefinition> _parameters = f.getParameters();
          for(final VariableDefinition param : _parameters) {
            _builder.append("String ");
            String _name_2 = param.getName();
            _builder.append(_name_2, "\t\t");
            {
              EList<VariableDefinition> _parameters_1 = f.getParameters();
              int _indexOf = _parameters_1.indexOf(param);
              EList<VariableDefinition> _parameters_2 = f.getParameters();
              int _length = ((Object[])Conversions.unwrapArray(_parameters_2, Object.class)).length;
              int _minus = (_length - 1);
              boolean _notEquals = (_indexOf != _minus);
              if (_notEquals) {
                _builder.append(", ");
              }
            }
          }
        }
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        {
          EList<Command> _statements = f.getStatements();
          for(final Command c_1 : _statements) {
            _builder.append("\t\t");
            _builder.append("\t");
            CharSequence _generateCommand_1 = this.generateCommand(c_1);
            _builder.append(_generateCommand_1, "\t\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateCommand(final Command c) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (c instanceof Click) {
      _matched=true;
      _switchResult = this.generateClick(((Click)c));
    }
    if (!_matched) {
      if (c instanceof Open) {
        _matched=true;
        _switchResult = this.generateOpen(((Open)c));
      }
    }
    if (!_matched) {
      if (c instanceof GoOn) {
        _matched=true;
        _switchResult = this.generateGoOn(((GoOn)c));
      }
    }
    if (!_matched) {
      if (c instanceof Fill) {
        _matched=true;
        _switchResult = this.generateFill(((Fill)c));
      }
    }
    if (!_matched) {
      if (c instanceof Verify) {
        _matched=true;
        _switchResult = this.generateVerify(((Verify)c));
      }
    }
    if (!_matched) {
      if (c instanceof Store) {
        _matched=true;
        _switchResult = this.generateStore(((Store)c));
      }
    }
    if (!_matched) {
      if (c instanceof Select) {
        _matched=true;
        _switchResult = this.generateSelect(((Select)c));
      }
    }
    if (!_matched) {
      if (c instanceof FunctionCall) {
        _matched=true;
        _switchResult = this.generateFunctionCall(((FunctionCall)c));
      }
    }
    _builder.append(_switchResult, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateFunctionCall(final FunctionCall fc) {
    StringConcatenation _builder = new StringConcatenation();
    FunctionName _name = fc.getName();
    String _name_1 = _name.getName();
    _builder.append(_name_1, "");
    _builder.append("(");
    {
      EList<String> _parameters = fc.getParameters();
      for(final String param : _parameters) {
        _builder.append("\"");
        _builder.append(param, "");
        _builder.append("\"");
        {
          EList<String> _parameters_1 = fc.getParameters();
          int _indexOf = _parameters_1.indexOf(param);
          EList<String> _parameters_2 = fc.getParameters();
          int _length = ((Object[])Conversions.unwrapArray(_parameters_2, Object.class)).length;
          int _minus = (_length - 1);
          boolean _notEquals = (_indexOf != _minus);
          if (_notEquals) {
            _builder.append(", ");
          }
        }
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateSelect(final Select s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new Select(driver.findElement(By.xpath(\"");
    Selector _selector = s.getSelector();
    CharSequence _generateSelector = this.generateSelector(_selector);
    _builder.append(_generateSelector, "");
    _builder.append("\"))).selectByVisibleText(");
    String _stringValue = s.getStringValue();
    VariableDefinition _keyValue = s.getKeyValue();
    CharSequence _generateValue = this.generateValue(_stringValue, _keyValue);
    _builder.append(_generateValue, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateClick(final Click c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.findElement(By.xpath(\"");
    Selector _selector = c.getSelector();
    CharSequence _generateSelector = this.generateSelector(_selector);
    _builder.append(_generateSelector, "");
    _builder.append("\")).click();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateSelector(final Selector s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _attributeName = s.getAttributeName();
      boolean _equals = _attributeName.equals("text");
      if (_equals) {
        _builder.append("//*[contains(text(), \'");
        String _attributeValue = s.getAttributeValue();
        _builder.append(_attributeValue, "");
        _builder.append("\')]");
      } else {
        _builder.append("//*[@");
        String _attributeName_1 = s.getAttributeName();
        _builder.append(_attributeName_1, "");
        _builder.append("=\\\"");
        String _attributeValue_1 = s.getAttributeValue();
        _builder.append(_attributeValue_1, "");
        _builder.append("\\\"]");
      }
    }
    return _builder;
  }
  
  public CharSequence generateOpen(final Open o) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("File file = new File(\"");
    String _driverPath = o.getDriverPath();
    _builder.append(_driverPath, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("System.setProperty(\"webdriver.");
    {
      String _program = o.getProgram();
      boolean _equals = _program.equals("chrome");
      if (_equals) {
        _builder.append("chrome");
      } else {
        _builder.append("gecko");
      }
    }
    _builder.append(".driver\", file.getAbsolutePath() );");
    _builder.newLineIfNotEmpty();
    _builder.append("driver = new ");
    {
      String _program_1 = o.getProgram();
      boolean _equals_1 = _program_1.equals("chrome");
      if (_equals_1) {
        _builder.append("Chrome");
      } else {
        _builder.append("Firefox");
      }
    }
    _builder.append("Driver();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateGoOn(final GoOn g) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(\"");
    String _address = g.getAddress();
    _builder.append(_address, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateFill(final Fill f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.findElement(By.xpath(\"");
    Selector _selector = f.getSelector();
    CharSequence _generateSelector = this.generateSelector(_selector);
    _builder.append(_generateSelector, "");
    _builder.append("\")).sendKeys(");
    String _stringValue = f.getStringValue();
    VariableDefinition _keyValue = f.getKeyValue();
    CharSequence _generateValue = this.generateValue(_stringValue, _keyValue);
    _builder.append(_generateValue, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateValue(final String stringValue, final VariableDefinition variableDefinition) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(stringValue, null));
      if (_notEquals) {
        _builder.append("\"");
        _builder.append(stringValue, "");
        _builder.append("\"");
      } else {
        String _name = variableDefinition.getName();
        _builder.append(_name, "");
      }
    }
    return _builder;
  }
  
  public CharSequence generateVerify(final Verify v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(driver.findElement(By.xpath(\"");
    Selector _selector = v.getSelector();
    CharSequence _generateSelector = this.generateSelector(_selector);
    _builder.append(_generateSelector, "");
    _builder.append("\")).getText().contains(\"");
    String _comparison = v.getComparison();
    _builder.append(_comparison, "");
    _builder.append("\") ? \"");
    Selector _selector_1 = v.getSelector();
    String _attributeValue = _selector_1.getAttributeValue();
    _builder.append(_attributeValue, "");
    _builder.append(" contains ");
    String _comparison_1 = v.getComparison();
    _builder.append(_comparison_1, "");
    _builder.append("\" : \"");
    Selector _selector_2 = v.getSelector();
    String _attributeValue_1 = _selector_2.getAttributeValue();
    _builder.append(_attributeValue_1, "");
    _builder.append(" does not contain ");
    String _comparison_2 = v.getComparison();
    _builder.append(_comparison_2, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateStore(final Store s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("String ");
    VariableDefinition _key = s.getKey();
    String _name = _key.getName();
    _builder.append(_name, "");
    _builder.append(" = driver.findElement(By.xpath(\"");
    Selector _selector = s.getSelector();
    CharSequence _generateSelector = this.generateSelector(_selector);
    _builder.append(_generateSelector, "");
    _builder.append("\")).getText();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
