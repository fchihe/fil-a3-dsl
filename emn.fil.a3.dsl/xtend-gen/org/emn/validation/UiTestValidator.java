/**
 * generated by Xtext 2.10.0
 */
package org.emn.validation;

import java.util.ArrayList;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.validation.Check;
import org.emn.uiTest.Command;
import org.emn.uiTest.Fill;
import org.emn.uiTest.Function;
import org.emn.uiTest.FunctionCall;
import org.emn.uiTest.FunctionName;
import org.emn.uiTest.Parameter;
import org.emn.uiTest.Select;
import org.emn.uiTest.Store;
import org.emn.uiTest.UiTest;
import org.emn.uiTest.UiTestPackage;
import org.emn.uiTest.VariableDefinition;
import org.emn.validation.AbstractUiTestValidator;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class UiTestValidator extends AbstractUiTestValidator {
  HashMap<String, Integer> functionParams;
  
  @Check
  public void checkFunctions(final UiTest uitest) {
    HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
    this.functionParams = _hashMap;
    ArrayList<String> innerCommandVariables = null;
    EList<Function> _functions = uitest.getFunctions();
    for (final Function function : _functions) {
      {
        ArrayList<String> _arrayList = new ArrayList<String>();
        innerCommandVariables = _arrayList;
        EList<VariableDefinition> _parameters = function.getParameters();
        for (final VariableDefinition param : _parameters) {
          String _name = param.getName();
          innerCommandVariables.add(_name);
        }
        FunctionName _name_1 = function.getName();
        String functionName = _name_1.getName();
        EList<VariableDefinition> _parameters_1 = function.getParameters();
        int _size = _parameters_1.size();
        this.functionParams.put(functionName, Integer.valueOf(_size));
        EList<Command> _statements = function.getStatements();
        for (final Command command : _statements) {
          if ((command instanceof Store)) {
            Store myStore = ((Store) command);
            VariableDefinition _key = myStore.getKey();
            String storeVar = _key.getName();
            this.checkStoreVarIsUnique(innerCommandVariables, myStore, storeVar);
            innerCommandVariables.add(storeVar);
          } else {
            if ((command instanceof FunctionCall)) {
              FunctionCall myFunctionCall = ((FunctionCall) command);
              this.checkFunctionCallParametersNumber(myFunctionCall);
              EList<Parameter> _parameters_2 = myFunctionCall.getParameters();
              for (final Parameter param_1 : _parameters_2) {
                {
                  String _xifexpression = null;
                  VariableDefinition _variable = param_1.getVariable();
                  boolean _tripleNotEquals = (_variable != null);
                  if (_tripleNotEquals) {
                    VariableDefinition _variable_1 = param_1.getVariable();
                    _xifexpression = _variable_1.getName();
                  } else {
                    _xifexpression = param_1.getString();
                  }
                  String paramName = _xifexpression;
                  this.checkFunctionCallParamVarIsDefined(param_1, innerCommandVariables, paramName, myFunctionCall);
                }
              }
            } else {
              if ((command instanceof Fill)) {
                Fill myFill = ((Fill) command);
                VariableDefinition var = myFill.getKeyValue();
                if ((var != null)) {
                  this.checkVarIsDefined(var, innerCommandVariables, myFill, null);
                }
              } else {
                if ((command instanceof Select)) {
                  Select mySelect = ((Select) command);
                  VariableDefinition var_1 = mySelect.getKeyValue();
                  if ((var_1 != null)) {
                    this.checkVarIsDefined(var_1, innerCommandVariables, null, mySelect);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  @Check
  public void checkCommands(final UiTest uitest) {
    ArrayList<String> commandVariables = new ArrayList<String>();
    EList<Command> _commands = uitest.getCommands();
    for (final Command command : _commands) {
      if ((command instanceof Store)) {
        Store myStore = ((Store) command);
        VariableDefinition _key = myStore.getKey();
        String storeVar = _key.getName();
        this.checkStoreVarIsUnique(commandVariables, myStore, storeVar);
        commandVariables.add(storeVar);
      } else {
        if ((command instanceof FunctionCall)) {
          FunctionCall myFunctionCall = ((FunctionCall) command);
          this.checkFunctionCallParametersNumber(myFunctionCall);
          EList<Parameter> _parameters = myFunctionCall.getParameters();
          for (final Parameter param : _parameters) {
            {
              String _xifexpression = null;
              VariableDefinition _variable = param.getVariable();
              boolean _tripleNotEquals = (_variable != null);
              if (_tripleNotEquals) {
                VariableDefinition _variable_1 = param.getVariable();
                _xifexpression = _variable_1.getName();
              } else {
                _xifexpression = param.getString();
              }
              String paramName = _xifexpression;
              this.checkFunctionCallParamVarIsDefined(param, commandVariables, paramName, myFunctionCall);
            }
          }
        } else {
          if ((command instanceof Fill)) {
            Fill myFill = ((Fill) command);
            VariableDefinition var = myFill.getKeyValue();
            if ((var != null)) {
              this.checkVarIsDefined(var, commandVariables, myFill, null);
            }
          } else {
            if ((command instanceof Select)) {
              Select mySelect = ((Select) command);
              VariableDefinition var_1 = mySelect.getKeyValue();
              if ((var_1 != null)) {
                this.checkVarIsDefined(var_1, commandVariables, null, mySelect);
              }
            }
          }
        }
      }
    }
  }
  
  private void checkFunctionCallParametersNumber(final FunctionCall myFunctionCall) {
    FunctionName _name = myFunctionCall.getName();
    String functionName = _name.getName();
    EList<Parameter> _parameters = myFunctionCall.getParameters();
    int currentParamNumber = _parameters.size();
    int expectedParamNumber = (this.functionParams.get(functionName)).intValue();
    if ((expectedParamNumber != currentParamNumber)) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Function ");
      _builder.append(functionName, "");
      _builder.append(" expected ");
      _builder.append(expectedParamNumber, "");
      _builder.append(" parameter(s), found ");
      _builder.append(currentParamNumber, "");
      this.error(_builder.toString(), myFunctionCall, UiTestPackage.Literals.FUNCTION_CALL__PARAMETERS);
    }
  }
  
  private void checkStoreVarIsUnique(final ArrayList<String> commandVariables, final Store myStore, final String storeVar) {
    boolean _contains = commandVariables.contains(storeVar);
    if (_contains) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("The variable ");
      _builder.append(storeVar, "");
      _builder.append(" is already used, please name it differently");
      this.error(_builder.toString(), myStore, 
        UiTestPackage.Literals.STORE__KEY);
    }
  }
  
  private void checkFunctionCallParamVarIsDefined(final Parameter param, final ArrayList<String> commandVariables, final String paramName, final FunctionCall myFunctionCall) {
    if (((param.getVariable() != null) && (!commandVariables.contains(paramName)))) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Parameter ");
      _builder.append(paramName, "");
      _builder.append(" can\'t be used here, it was not declared before");
      this.error(_builder.toString(), myFunctionCall, 
        UiTestPackage.Literals.FUNCTION_CALL__PARAMETERS);
    }
  }
  
  private void checkVarIsDefined(final VariableDefinition var, final ArrayList<String> innerCommandVariables, final Fill fill, final Select select) {
    String varName = var.getName();
    boolean _contains = innerCommandVariables.contains(varName);
    boolean _not = (!_contains);
    if (_not) {
      Command command = null;
      EReference literal = null;
      if ((fill != null)) {
        command = fill;
        literal = UiTestPackage.Literals.FILL__KEY_VALUE;
      } else {
        command = select;
        literal = UiTestPackage.Literals.SELECT__KEY_VALUE;
      }
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Variable ");
      _builder.append(varName, "");
      _builder.append(" can\'t be used here, it was not declared before");
      this.error(_builder.toString(), command, literal);
    }
  }
}
