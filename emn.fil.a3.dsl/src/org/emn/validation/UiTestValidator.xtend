/** 
 * generated by Xtext 2.10.0
 */
package org.emn.validation

import java.util.ArrayList
import java.util.HashMap
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.validation.Check
import org.emn.uiTest.Command
import org.emn.uiTest.Fill
import org.emn.uiTest.Function
import org.emn.uiTest.FunctionCall
import org.emn.uiTest.Parameter
import org.emn.uiTest.Select
import org.emn.uiTest.Store
import org.emn.uiTest.UiTest
import org.emn.uiTest.UiTestPackage
import org.emn.uiTest.VariableDefinition

/** 
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all") class UiTestValidator extends AbstractUiTestValidator {
	/*package HashMap<String, Integer> functionParams
	@Check def void checkFunctions(UiTest uitest) {
		functionParams = new HashMap<String, Integer>()
		var ArrayList<String> innerCommandVariables
		for (Function function : uitest.getFunctions()) {
			innerCommandVariables = new ArrayList<String>()
			for (VariableDefinition param : function.getParameters()) {
				innerCommandVariables.add(param.getName())
			}
			var String functionName = function.getName().getName()
			// save number of parameters of function
			functionParams.put(functionName, function.getParameters().size())
			for (Command command : function.getStatements()) {
				if (command instanceof Store) {
					var Store myStore = (command as Store)
					var String storeVar = myStore.getKey().getName()
					this.checkStoreVarIsUnique(innerCommandVariables, myStore, storeVar)
					innerCommandVariables.add(storeVar)
				} else if (command instanceof FunctionCall) {
					var FunctionCall myFunctionCall = (command as FunctionCall)
					this.checkFunctionCallParametersNumber(myFunctionCall)
					for (Parameter param : myFunctionCall.getParameters()) {
						var String paramName = if(param.getVariable() !== null) param.getVariable().
								getName() else param.getString()
						this.checkFunctionCallParamVarIsDefined(param, innerCommandVariables, paramName, myFunctionCall)
					}
				} else if (command instanceof Fill) {
					var Fill myFill = (command as Fill)
					var VariableDefinition ^var = myFill.getKeyValue()
					if (^var !== null) {
						this.checkVarIsDefined(^var, innerCommandVariables, myFill, null)
					}
				} else if (command instanceof Select) {
					var Select mySelect = (command as Select)
					var VariableDefinition ^var = mySelect.getKeyValue()
					if (^var !== null) {
						this.checkVarIsDefined(^var, innerCommandVariables, null, mySelect)
					}
				}
			}
		}
	}

	@Check def void checkCommands(UiTest uitest) {
		var ArrayList<String> commandVariables = new ArrayList<String>()
		for (Command command : uitest.getCommands()) {
			if (command instanceof Store) {
				// check store variable is unique
				var Store myStore = (command as Store)
				var String storeVar = myStore.getKey().getName()
				this.checkStoreVarIsUnique(commandVariables, myStore, storeVar)
				commandVariables.add(storeVar)
			} else if (command instanceof FunctionCall) {
				var FunctionCall myFunctionCall = (command as FunctionCall)
				this.checkFunctionCallParametersNumber(myFunctionCall)
				for (Parameter param : myFunctionCall.getParameters()) {
					var String paramName = if(param.getVariable() !== null) param.getVariable().getName() else param.
							getString()
					this.checkFunctionCallParamVarIsDefined(param, commandVariables, paramName, myFunctionCall)
				}
			} else if (command instanceof Fill) {
				var Fill myFill = (command as Fill)
				var VariableDefinition ^var = myFill.getKeyValue()
				if (^var !== null) {
					this.checkVarIsDefined(^var, commandVariables, myFill, null)
				}
			} else if (command instanceof Select) {
				var Select mySelect = (command as Select)
				var VariableDefinition ^var = mySelect.getKeyValue()
				if (^var !== null) {
					this.checkVarIsDefined(^var, commandVariables, null, mySelect)
				}
			}
		}
	}

	def private void checkFunctionCallParametersNumber(FunctionCall myFunctionCall) {
		var String functionName = myFunctionCall.getName().getName()
		var int currentParamNumber = myFunctionCall.getParameters().size()
		var int expectedParamNumber = functionParams.get(functionName)
		if (expectedParamNumber !== currentParamNumber) {
			error('''Function «functionName» expected «expectedParamNumber» parameter(s), found «currentParamNumber»''',
				myFunctionCall, UiTestPackage.Literals.FUNCTION_CALL__PARAMETERS)
		}
	}

	def private void checkStoreVarIsUnique(ArrayList<String> commandVariables, Store myStore, String storeVar) {
		if (commandVariables.contains(storeVar)) {
			error('''The variable «storeVar» is already used, please name it differently''', myStore,
				UiTestPackage.Literals.STORE__KEY)
		}
	}

	def private void checkFunctionCallParamVarIsDefined(Parameter param, ArrayList<String> commandVariables,
		String paramName, FunctionCall myFunctionCall) {
		if (param.getVariable() !== null && !commandVariables.contains(paramName)) {
			error('''Parameter «paramName» can't be used here, it was not declared before''', myFunctionCall,
				UiTestPackage.Literals.FUNCTION_CALL__PARAMETERS)
		}
	}

	def private void checkVarIsDefined(VariableDefinition ^var, ArrayList<String> innerCommandVariables, Fill fill,
		Select select) {
		var String varName = ^var.getName()
		if (!innerCommandVariables.contains(varName)) {
			var Command command
			var EReference literal
			if (fill !== null) {
				command = fill
				literal = UiTestPackage.Literals.FILL__KEY_VALUE
			} else {
				command = select
				literal = UiTestPackage.Literals.SELECT__KEY_VALUE
			}
			error('''Variable «varName» can't be used here, it was not declared before''', command, literal)
		}
	}*/
	
}
