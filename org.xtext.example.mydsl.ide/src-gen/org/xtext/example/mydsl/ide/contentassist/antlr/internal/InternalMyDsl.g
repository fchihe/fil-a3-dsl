/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getCommandsAssignment()); }
		(rule__Model__CommandsAssignment)*
		{ after(grammarAccess.getModelAccess().getCommandsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpen
entryRuleOpen
:
{ before(grammarAccess.getOpenRule()); }
	 ruleOpen
{ after(grammarAccess.getOpenRule()); } 
	 EOF 
;

// Rule Open
ruleOpen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpenAccess().getGroup()); }
		(rule__Open__Group__0)
		{ after(grammarAccess.getOpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoOn
entryRuleGoOn
:
{ before(grammarAccess.getGoOnRule()); }
	 ruleGoOn
{ after(grammarAccess.getGoOnRule()); } 
	 EOF 
;

// Rule GoOn
ruleGoOn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoOnAccess().getGroup()); }
		(rule__GoOn__Group__0)
		{ after(grammarAccess.getGoOnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFill
entryRuleFill
:
{ before(grammarAccess.getFillRule()); }
	 ruleFill
{ after(grammarAccess.getFillRule()); } 
	 EOF 
;

// Rule Fill
ruleFill 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFillAccess().getGroup()); }
		(rule__Fill__Group__0)
		{ after(grammarAccess.getFillAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClick
entryRuleClick
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickAccess().getGroup()); }
		(rule__Click__Group__0)
		{ after(grammarAccess.getClickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerify
entryRuleVerify
:
{ before(grammarAccess.getVerifyRule()); }
	 ruleVerify
{ after(grammarAccess.getVerifyRule()); } 
	 EOF 
;

// Rule Verify
ruleVerify 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerifyAccess().getGroup()); }
		(rule__Verify__Group__0)
		{ after(grammarAccess.getVerifyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getOpenParserRuleCall_0_0()); }
		ruleOpen
		{ after(grammarAccess.getCommandAccess().getOpenParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGoOnParserRuleCall_0_1()); }
		ruleGoOn
		{ after(grammarAccess.getCommandAccess().getGoOnParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getFillParserRuleCall_0_2()); }
		ruleFill
		{ after(grammarAccess.getCommandAccess().getFillParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getSelectParserRuleCall_0_3()); }
		ruleSelect
		{ after(grammarAccess.getCommandAccess().getSelectParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getClickParserRuleCall_0_4()); }
		ruleClick
		{ after(grammarAccess.getCommandAccess().getClickParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getVerifyParserRuleCall_0_5()); }
		ruleVerify
		{ after(grammarAccess.getCommandAccess().getVerifyParserRuleCall_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getAlternatives_0()); }
	(rule__Command__Alternatives_0)
	{ after(grammarAccess.getCommandAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getCommandAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__0__Impl
	rule__Open__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getOpenKeyword_0()); }
	'open('
	{ after(grammarAccess.getOpenAccess().getOpenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__1__Impl
	rule__Open__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getProgramAssignment_1()); }
	(rule__Open__ProgramAssignment_1)
	{ after(grammarAccess.getOpenAccess().getProgramAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getOpenAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoOn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoOn__Group__0__Impl
	rule__GoOn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoOnAccess().getGoOnKeyword_0()); }
	'goOn('
	{ after(grammarAccess.getGoOnAccess().getGoOnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoOn__Group__1__Impl
	rule__GoOn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoOnAccess().getAdressAssignment_1()); }
	(rule__GoOn__AdressAssignment_1)
	{ after(grammarAccess.getGoOnAccess().getAdressAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoOn__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoOnAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getGoOnAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__0__Impl
	rule__Fill__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getFillKeyword_0()); }
	'fill('
	{ after(grammarAccess.getFillAccess().getFillKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__1__Impl
	rule__Fill__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getFieldNameAssignment_1()); }
	(rule__Fill__FieldNameAssignment_1)
	{ after(grammarAccess.getFillAccess().getFieldNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__2__Impl
	rule__Fill__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getFillAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__3__Impl
	rule__Fill__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getFieldValueAssignment_3()); }
	(rule__Fill__FieldValueAssignment_3)
	{ after(grammarAccess.getFillAccess().getFieldValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFillAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
	'select('
	{ after(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFieldNameAssignment_1()); }
	(rule__Select__FieldNameAssignment_1)
	{ after(grammarAccess.getSelectAccess().getFieldNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getSelectAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getClickKeyword_0()); }
	'click('
	{ after(grammarAccess.getClickAccess().getClickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__1__Impl
	rule__Click__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getFieldNameAssignment_1()); }
	(rule__Click__FieldNameAssignment_1)
	{ after(grammarAccess.getClickAccess().getFieldNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getClickAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__0__Impl
	rule__Verify__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }
	'verify('
	{ after(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__1__Impl
	rule__Verify__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getLinkAssignment_1()); }
	(rule__Verify__LinkAssignment_1)
	{ after(grammarAccess.getVerifyAccess().getLinkAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getVerifyAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__CommandsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__ProgramAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getProgramIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getOpenAccess().getProgramIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__AdressAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoOnAccess().getAdressIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGoOnAccess().getAdressIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__FieldNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getFieldNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFillAccess().getFieldNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__FieldValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getFieldValueIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getFillAccess().getFieldValueIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__FieldNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFieldNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectAccess().getFieldNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__FieldNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getFieldNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getClickAccess().getFieldNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__LinkAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerifyAccess().getLinkIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVerifyAccess().getLinkIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
