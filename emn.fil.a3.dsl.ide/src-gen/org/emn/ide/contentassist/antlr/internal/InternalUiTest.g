/*
 * generated by Xtext 2.10.0
 */
grammar InternalUiTest;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.emn.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.emn.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.emn.services.UiTestGrammarAccess;

}
@parser::members {
	private UiTestGrammarAccess grammarAccess;

	public void setGrammarAccess(UiTestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleUiTest
entryRuleUiTest
:
{ before(grammarAccess.getUiTestRule()); }
	 ruleUiTest
{ after(grammarAccess.getUiTestRule()); } 
	 EOF 
;

// Rule UiTest
ruleUiTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUiTestAccess().getGroup()); }
		(rule__UiTest__Group__0)
		{ after(grammarAccess.getUiTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
		(rule__FunctionName__NameAssignment)
		{ after(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpen
entryRuleOpen
:
{ before(grammarAccess.getOpenRule()); }
	 ruleOpen
{ after(grammarAccess.getOpenRule()); } 
	 EOF 
;

// Rule Open
ruleOpen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpenAccess().getGroup()); }
		(rule__Open__Group__0)
		{ after(grammarAccess.getOpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoOn
entryRuleGoOn
:
{ before(grammarAccess.getGoOnRule()); }
	 ruleGoOn
{ after(grammarAccess.getGoOnRule()); } 
	 EOF 
;

// Rule GoOn
ruleGoOn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoOnAccess().getGroup()); }
		(rule__GoOn__Group__0)
		{ after(grammarAccess.getGoOnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getGroup()); }
		(rule__Store__Group__0)
		{ after(grammarAccess.getStoreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFill
entryRuleFill
:
{ before(grammarAccess.getFillRule()); }
	 ruleFill
{ after(grammarAccess.getFillRule()); } 
	 EOF 
;

// Rule Fill
ruleFill 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFillAccess().getGroup()); }
		(rule__Fill__Group__0)
		{ after(grammarAccess.getFillAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClick
entryRuleClick
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickAccess().getGroup()); }
		(rule__Click__Group__0)
		{ after(grammarAccess.getClickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerify
entryRuleVerify
:
{ before(grammarAccess.getVerifyRule()); }
	 ruleVerify
{ after(grammarAccess.getVerifyRule()); } 
	 EOF 
;

// Rule Verify
ruleVerify 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerifyAccess().getGroup()); }
		(rule__Verify__Group__0)
		{ after(grammarAccess.getVerifyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelector
entryRuleSelector
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorAccess().getGroup()); }
		(rule__Selector__Group__0)
		{ after(grammarAccess.getSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition
:
{ before(grammarAccess.getVariableDefinitionRule()); }
	 ruleVariableDefinition
{ after(grammarAccess.getVariableDefinitionRule()); } 
	 EOF 
;

// Rule VariableDefinition
ruleVariableDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDefinitionAccess().getNameAssignment()); }
		(rule__VariableDefinition__NameAssignment)
		{ after(grammarAccess.getVariableDefinitionAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKEY
entryRuleKEY
:
{ before(grammarAccess.getKEYRule()); }
	 ruleKEY
{ after(grammarAccess.getKEYRule()); } 
	 EOF 
;

// Rule KEY
ruleKEY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKEYAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getKEYAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__StatementsAlternatives_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getStatementsCommandParserRuleCall_6_0_0()); }
		ruleCommand
		{ after(grammarAccess.getFunctionAccess().getStatementsCommandParserRuleCall_6_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getStatementsFunctionCallParserRuleCall_6_0_1()); }
		ruleFunctionCall
		{ after(grammarAccess.getFunctionAccess().getStatementsFunctionCallParserRuleCall_6_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives_0_0()); }
		(rule__Command__Alternatives_0_0)
		{ after(grammarAccess.getCommandAccess().getAlternatives_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getFunctionCallParserRuleCall_0_1()); }
		ruleFunctionCall
		{ after(grammarAccess.getCommandAccess().getFunctionCallParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getOpenParserRuleCall_0_0_0()); }
		ruleOpen
		{ after(grammarAccess.getCommandAccess().getOpenParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGoOnParserRuleCall_0_0_1()); }
		ruleGoOn
		{ after(grammarAccess.getCommandAccess().getGoOnParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getFillParserRuleCall_0_0_2()); }
		ruleFill
		{ after(grammarAccess.getCommandAccess().getFillParserRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getClickParserRuleCall_0_0_3()); }
		ruleClick
		{ after(grammarAccess.getCommandAccess().getClickParserRuleCall_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getVerifyParserRuleCall_0_0_4()); }
		ruleVerify
		{ after(grammarAccess.getCommandAccess().getVerifyParserRuleCall_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getStoreParserRuleCall_0_0_5()); }
		ruleStore
		{ after(grammarAccess.getCommandAccess().getStoreParserRuleCall_0_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getStringValueAssignment_2_0()); }
		(rule__Fill__StringValueAssignment_2_0)
		{ after(grammarAccess.getFillAccess().getStringValueAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getFillAccess().getKeyValueAssignment_2_1()); }
		(rule__Fill__KeyValueAssignment_2_1)
		{ after(grammarAccess.getFillAccess().getKeyValueAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UiTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UiTest__Group__0__Impl
	rule__UiTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UiTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUiTestAccess().getFunctionsAssignment_0()); }
	(rule__UiTest__FunctionsAssignment_0)*
	{ after(grammarAccess.getUiTestAccess().getFunctionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UiTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UiTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UiTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUiTestAccess().getCommandsAssignment_1()); }
	(rule__UiTest__CommandsAssignment_1)*
	{ after(grammarAccess.getUiTestAccess().getCommandsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getParametersAssignment_3()); }
	(rule__Function__ParametersAssignment_3)*
	{ after(grammarAccess.getFunctionAccess().getParametersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
	rule__Function__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFunctionAccess().getStatementsAssignment_6()); }
		(rule__Function__StatementsAssignment_6)
		{ after(grammarAccess.getFunctionAccess().getStatementsAssignment_6()); }
	)
	(
		{ before(grammarAccess.getFunctionAccess().getStatementsAssignment_6()); }
		(rule__Function__StatementsAssignment_6)*
		{ after(grammarAccess.getFunctionAccess().getStatementsAssignment_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
	(rule__FunctionCall__NameAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_2()); }
	(rule__FunctionCall__ParametersAssignment_2)*
	{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getAlternatives_0()); }
	(rule__Command__Alternatives_0)
	{ after(grammarAccess.getCommandAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getCommandAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__0__Impl
	rule__Open__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getNameAssignment_0()); }
	(rule__Open__NameAssignment_0)
	{ after(grammarAccess.getOpenAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getProgramAssignment_1()); }
	(rule__Open__ProgramAssignment_1)
	{ after(grammarAccess.getOpenAccess().getProgramAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoOn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoOn__Group__0__Impl
	rule__GoOn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoOnAccess().getNameAssignment_0()); }
	(rule__GoOn__NameAssignment_0)
	{ after(grammarAccess.getGoOnAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoOn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoOnAccess().getAddressAssignment_1()); }
	(rule__GoOn__AddressAssignment_1)
	{ after(grammarAccess.getGoOnAccess().getAddressAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getStoreKeyword_0()); }
	'store'
	{ after(grammarAccess.getStoreAccess().getStoreKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__1__Impl
	rule__Store__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getSelectorAssignment_1()); }
	(rule__Store__SelectorAssignment_1)
	{ after(grammarAccess.getStoreAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getKeyAssignment_2()); }
	(rule__Store__KeyAssignment_2)
	{ after(grammarAccess.getStoreAccess().getKeyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__0__Impl
	rule__Fill__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getFillKeyword_0()); }
	'fill'
	{ after(grammarAccess.getFillAccess().getFillKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__1__Impl
	rule__Fill__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getSelectorAssignment_1()); }
	(rule__Fill__SelectorAssignment_1)
	{ after(grammarAccess.getFillAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fill__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFillAccess().getAlternatives_2()); }
	(rule__Fill__Alternatives_2)
	{ after(grammarAccess.getFillAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getNameAssignment_0()); }
	(rule__Click__NameAssignment_0)
	{ after(grammarAccess.getClickAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getSelectorAssignment_1()); }
	(rule__Click__SelectorAssignment_1)
	{ after(grammarAccess.getClickAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__0__Impl
	rule__Verify__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getNameAssignment_0()); }
	(rule__Verify__NameAssignment_0)
	{ after(grammarAccess.getVerifyAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__1__Impl
	rule__Verify__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getSelectorAssignment_1()); }
	(rule__Verify__SelectorAssignment_1)
	{ after(grammarAccess.getVerifyAccess().getSelectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verify__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifyAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
	{ after(grammarAccess.getVerifyAccess().getSTRINGTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__0__Impl
	rule__Selector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__1__Impl
	rule__Selector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getAttributeNameAssignment_1()); }
	(rule__Selector__AttributeNameAssignment_1)
	{ after(grammarAccess.getSelectorAccess().getAttributeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__2__Impl
	rule__Selector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getSelectorAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__3__Impl
	rule__Selector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getAttributeValueAssignment_3()); }
	(rule__Selector__AttributeValueAssignment_3)
	{ after(grammarAccess.getSelectorAccess().getAttributeValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UiTest__FunctionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUiTestAccess().getFunctionsFunctionParserRuleCall_0_0()); }
		ruleFunction
		{ after(grammarAccess.getUiTestAccess().getFunctionsFunctionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UiTest__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUiTestAccess().getCommandsCommandParserRuleCall_1_0()); }
		ruleCommand
		{ after(grammarAccess.getUiTestAccess().getCommandsCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameFunctionNameParserRuleCall_1_0()); }
		ruleFunctionName
		{ after(grammarAccess.getFunctionAccess().getNameFunctionNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParametersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getParametersVariableDefinitionParserRuleCall_3_0()); }
		ruleVariableDefinition
		{ after(grammarAccess.getFunctionAccess().getParametersVariableDefinitionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__StatementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getStatementsAlternatives_6_0()); }
		(rule__Function__StatementsAlternatives_6_0)
		{ after(grammarAccess.getFunctionAccess().getStatementsAlternatives_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getNameFunctionNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getNameFunctionNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getNameFunctionNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getNameFunctionNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParametersSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getFunctionCallAccess().getParametersSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getNameOpenKeyword_0_0()); }
		(
			{ before(grammarAccess.getOpenAccess().getNameOpenKeyword_0_0()); }
			'open'
			{ after(grammarAccess.getOpenAccess().getNameOpenKeyword_0_0()); }
		)
		{ after(grammarAccess.getOpenAccess().getNameOpenKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__ProgramAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getProgramSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getOpenAccess().getProgramSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoOnAccess().getNameGoOnKeyword_0_0()); }
		(
			{ before(grammarAccess.getGoOnAccess().getNameGoOnKeyword_0_0()); }
			'goOn'
			{ after(grammarAccess.getGoOnAccess().getNameGoOnKeyword_0_0()); }
		)
		{ after(grammarAccess.getGoOnAccess().getNameGoOnKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoOn__AddressAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoOnAccess().getAddressSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getGoOnAccess().getAddressSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getSelectorSelectorParserRuleCall_1_0()); }
		ruleSelector
		{ after(grammarAccess.getStoreAccess().getSelectorSelectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__KeyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getKeyVariableDefinitionParserRuleCall_2_0()); }
		ruleVariableDefinition
		{ after(grammarAccess.getStoreAccess().getKeyVariableDefinitionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getSelectorSelectorParserRuleCall_1_0()); }
		ruleSelector
		{ after(grammarAccess.getFillAccess().getSelectorSelectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__StringValueAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getStringValueSTRINGTerminalRuleCall_2_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getFillAccess().getStringValueSTRINGTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__KeyValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFillAccess().getKeyValueVariableDefinitionCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getFillAccess().getKeyValueVariableDefinitionIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFillAccess().getKeyValueVariableDefinitionIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getFillAccess().getKeyValueVariableDefinitionCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getNameClickKeyword_0_0()); }
		(
			{ before(grammarAccess.getClickAccess().getNameClickKeyword_0_0()); }
			'click'
			{ after(grammarAccess.getClickAccess().getNameClickKeyword_0_0()); }
		)
		{ after(grammarAccess.getClickAccess().getNameClickKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getSelectorSelectorParserRuleCall_1_0()); }
		ruleSelector
		{ after(grammarAccess.getClickAccess().getSelectorSelectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerifyAccess().getNameVerifyKeyword_0_0()); }
		(
			{ before(grammarAccess.getVerifyAccess().getNameVerifyKeyword_0_0()); }
			'verify'
			{ after(grammarAccess.getVerifyAccess().getNameVerifyKeyword_0_0()); }
		)
		{ after(grammarAccess.getVerifyAccess().getNameVerifyKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__SelectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerifyAccess().getSelectorSelectorParserRuleCall_1_0()); }
		ruleSelector
		{ after(grammarAccess.getVerifyAccess().getSelectorSelectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__AttributeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getAttributeNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSelectorAccess().getAttributeNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__AttributeValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getAttributeValueSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getSelectorAccess().getAttributeValueSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDefinition__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDefinitionAccess().getNameKEYParserRuleCall_0()); }
		ruleKEY
		{ after(grammarAccess.getVariableDefinitionAccess().getNameKEYParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
