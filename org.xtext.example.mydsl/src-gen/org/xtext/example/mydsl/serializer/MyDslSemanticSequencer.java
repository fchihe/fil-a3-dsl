/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import org.xtext.example.mydsl.uiTest.Click;
import org.xtext.example.mydsl.uiTest.Fill;
import org.xtext.example.mydsl.uiTest.GoOn;
import org.xtext.example.mydsl.uiTest.Model;
import org.xtext.example.mydsl.uiTest.Open;
import org.xtext.example.mydsl.uiTest.Select;
import org.xtext.example.mydsl.uiTest.UiTestPackage;
import org.xtext.example.mydsl.uiTest.Verify;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UiTestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UiTestPackage.CLICK:
				sequence_Click(context, (Click) semanticObject); 
				return; 
			case UiTestPackage.FILL:
				sequence_Fill(context, (Fill) semanticObject); 
				return; 
			case UiTestPackage.GO_ON:
				sequence_GoOn(context, (GoOn) semanticObject); 
				return; 
			case UiTestPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case UiTestPackage.OPEN:
				sequence_Open(context, (Open) semanticObject); 
				return; 
			case UiTestPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case UiTestPackage.VERIFY:
				sequence_Verify(context, (Verify) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns Click
	 *     Click returns Click
	 *
	 * Constraint:
	 *     fieldName=ID
	 */
	protected void sequence_Click(ISerializationContext context, Click semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UiTestPackage.Literals.CLICK__FIELD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiTestPackage.Literals.CLICK__FIELD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickAccess().getFieldNameIDTerminalRuleCall_1_0(), semanticObject.getFieldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Fill
	 *     Fill returns Fill
	 *
	 * Constraint:
	 *     (fieldName=ID fieldValue=ID)
	 */
	protected void sequence_Fill(ISerializationContext context, Fill semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UiTestPackage.Literals.FILL__FIELD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiTestPackage.Literals.FILL__FIELD_NAME));
			if (transientValues.isValueTransient(semanticObject, UiTestPackage.Literals.FILL__FIELD_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiTestPackage.Literals.FILL__FIELD_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFillAccess().getFieldNameIDTerminalRuleCall_1_0(), semanticObject.getFieldName());
		feeder.accept(grammarAccess.getFillAccess().getFieldValueIDTerminalRuleCall_3_0(), semanticObject.getFieldValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns GoOn
	 *     GoOn returns GoOn
	 *
	 * Constraint:
	 *     adress=ID
	 */
	protected void sequence_GoOn(ISerializationContext context, GoOn semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UiTestPackage.Literals.GO_ON__ADRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiTestPackage.Literals.GO_ON__ADRESS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoOnAccess().getAdressIDTerminalRuleCall_1_0(), semanticObject.getAdress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Open
	 *     Open returns Open
	 *
	 * Constraint:
	 *     program=ID
	 */
	protected void sequence_Open(ISerializationContext context, Open semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UiTestPackage.Literals.OPEN__PROGRAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiTestPackage.Literals.OPEN__PROGRAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOpenAccess().getProgramIDTerminalRuleCall_1_0(), semanticObject.getProgram());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Select
	 *     Select returns Select
	 *
	 * Constraint:
	 *     fieldName=ID
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UiTestPackage.Literals.SELECT__FIELD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiTestPackage.Literals.SELECT__FIELD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectAccess().getFieldNameIDTerminalRuleCall_1_0(), semanticObject.getFieldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Verify
	 *     Verify returns Verify
	 *
	 * Constraint:
	 *     link=ID
	 */
	protected void sequence_Verify(ISerializationContext context, Verify semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UiTestPackage.Literals.VERIFY__LINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UiTestPackage.Literals.VERIFY__LINK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerifyAccess().getLinkIDTerminalRuleCall_1_0(), semanticObject.getLink());
		feeder.finish();
	}
	
	
}
