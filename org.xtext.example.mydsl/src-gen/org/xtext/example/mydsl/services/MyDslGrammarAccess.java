/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Model:
		//	commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cOpenParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cGoOnParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFillParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cSelectParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cClickParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cVerifyParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Command:
		//	(Open | GoOn | Fill | Select | Click | Verify) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Open | GoOn | Fill | Select | Click | Verify) ';'
		public Group getGroup() { return cGroup; }
		
		//(Open | GoOn | Fill | Select | Click | Verify)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Open
		public RuleCall getOpenParserRuleCall_0_0() { return cOpenParserRuleCall_0_0; }
		
		//GoOn
		public RuleCall getGoOnParserRuleCall_0_1() { return cGoOnParserRuleCall_0_1; }
		
		//Fill
		public RuleCall getFillParserRuleCall_0_2() { return cFillParserRuleCall_0_2; }
		
		//Select
		public RuleCall getSelectParserRuleCall_0_3() { return cSelectParserRuleCall_0_3; }
		
		//Click
		public RuleCall getClickParserRuleCall_0_4() { return cClickParserRuleCall_0_4; }
		
		//Verify
		public RuleCall getVerifyParserRuleCall_0_5() { return cVerifyParserRuleCall_0_5; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProgramAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramIDTerminalRuleCall_1_0 = (RuleCall)cProgramAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Open:
		//	"open(" program=ID ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"open(" program=ID ")"
		public Group getGroup() { return cGroup; }
		
		//"open("
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//program=ID
		public Assignment getProgramAssignment_1() { return cProgramAssignment_1; }
		
		//ID
		public RuleCall getProgramIDTerminalRuleCall_1_0() { return cProgramIDTerminalRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class GoOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GoOn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdressAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdressIDTerminalRuleCall_1_0 = (RuleCall)cAdressAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GoOn:
		//	"goOn(" adress=ID ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"goOn(" adress=ID ")"
		public Group getGroup() { return cGroup; }
		
		//"goOn("
		public Keyword getGoOnKeyword_0() { return cGoOnKeyword_0; }
		
		//adress=ID
		public Assignment getAdressAssignment_1() { return cAdressAssignment_1; }
		
		//ID
		public RuleCall getAdressIDTerminalRuleCall_1_0() { return cAdressIDTerminalRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldValueIDTerminalRuleCall_3_0 = (RuleCall)cFieldValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Fill:
		//	"fill(" fieldName=ID ',' fieldValue=ID ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"fill(" fieldName=ID ',' fieldValue=ID ")"
		public Group getGroup() { return cGroup; }
		
		//"fill("
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_1_0() { return cFieldNameIDTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//fieldValue=ID
		public Assignment getFieldValueAssignment_3() { return cFieldValueAssignment_3; }
		
		//ID
		public RuleCall getFieldValueIDTerminalRuleCall_3_0() { return cFieldValueIDTerminalRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Select:
		//	"select(" fieldName=ID ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"select(" fieldName=ID ")"
		public Group getGroup() { return cGroup; }
		
		//"select("
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_1_0() { return cFieldNameIDTerminalRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameIDTerminalRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Click:
		//	"click(" fieldName=ID ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"click(" fieldName=ID ")"
		public Group getGroup() { return cGroup; }
		
		//"click("
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//fieldName=ID
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//ID
		public RuleCall getFieldNameIDTerminalRuleCall_1_0() { return cFieldNameIDTerminalRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkIDTerminalRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Verify:
		//	"verify(" link=ID ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"verify(" link=ID ")"
		public Group getGroup() { return cGroup; }
		
		//"verify("
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//link=ID
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }
		
		//ID
		public RuleCall getLinkIDTerminalRuleCall_1_0() { return cLinkIDTerminalRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final CommandElements pCommand;
	private final OpenElements pOpen;
	private final GoOnElements pGoOn;
	private final FillElements pFill;
	private final SelectElements pSelect;
	private final ClickElements pClick;
	private final VerifyElements pVerify;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCommand = new CommandElements();
		this.pOpen = new OpenElements();
		this.pGoOn = new GoOnElements();
		this.pFill = new FillElements();
		this.pSelect = new SelectElements();
		this.pClick = new ClickElements();
		this.pVerify = new VerifyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	commands+=Command*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Command:
	//	(Open | GoOn | Fill | Select | Click | Verify) ';';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Open:
	//	"open(" program=ID ")";
	public OpenElements getOpenAccess() {
		return pOpen;
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}
	
	//GoOn:
	//	"goOn(" adress=ID ")";
	public GoOnElements getGoOnAccess() {
		return pGoOn;
	}
	
	public ParserRule getGoOnRule() {
		return getGoOnAccess().getRule();
	}
	
	//Fill:
	//	"fill(" fieldName=ID ',' fieldValue=ID ")";
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}
	
	//Select:
	//	"select(" fieldName=ID ")";
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Click:
	//	"click(" fieldName=ID ")";
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Verify:
	//	"verify(" link=ID ")";
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
